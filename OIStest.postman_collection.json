{
	"info": {
		"_postman_id": "80b50e97-2539-460e-a718-3d5447b4229a",
		"name": "OIStest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28212876"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "User 1 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has user create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Vasya\"').to.eql('Vasya');",
									"});",
									"pm.test(\"Test user 'notes' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('notes');",
									"    pm.expect(jsonData.notes, '\"notes\" must be \"друг\"').to.eql('друг');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Vasya\",\n    \"notes\": \"друг\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/OIStest/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"OIStest",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User 2 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has user create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Kolya\"').to.eql('Kolya');",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('notes');",
									"    pm.expect(jsonData.notes, '\"notes\" must be \"Коля\"').to.eql('Коля');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Kolya\",\n    \"notes\": \"Коля\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/OIStest/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"OIStest",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User 1 change",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has user create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Petya\"').to.eql('Petya');",
									"});",
									"pm.test(\"Test user 'notes' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('notes');",
									"    pm.expect(jsonData.notes, '\"notes\" must be \"друг\"').to.eql('друг');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Petya\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/OIStest/users/:userId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"OIStest",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list user response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Test user[0] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test user[0] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"Petya\"').to.eql('Petya');",
									"});",
									"pm.test(\"Test user[0] 'notes' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('notes');",
									"    pm.expect(jsonData[0].notes, '\"notes\" must be \"друг\"').to.eql('друг');",
									"});",
									"",
									"pm.test(\"Test user[1] 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test user[1] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('name');",
									"    pm.expect(jsonData[1].name, '\"name\" must be \"Kolya\"').to.eql('Kolya');",
									"});",
									"pm.test(\"Test user[1] 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('notes');",
									"    pm.expect(jsonData[1].notes, '\"notes\" must be \"Коля\"').to.eql('Коля');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/OIStest/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"OIStest",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск юзеров по заметке",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test list user response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"Petya\"').to.eql('Petya');\r",
									"});\r",
									"pm.test(\"Test user[0] 'notes' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('notes');\r",
									"    pm.expect(jsonData[0].notes, '\"notes\" must be \"друг\"').to.eql('друг');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/OIStest/users/search?text=дРуГ",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"OIStest",
								"users",
								"search"
							],
							"query": [
								{
									"key": "text",
									"value": "дРуГ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск юзеров по ФИО",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test list user response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test user[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"Kolya\"').to.eql('Kolya');\r",
									"});\r",
									"pm.test(\"Test user[0] 'notes' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('notes');\r",
									"    pm.expect(jsonData[0].notes, '\"notes\" must be \"Коля\"').to.eql('Коля');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/OIStest/users/search?text=Kolya",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"OIStest",
								"users",
								"search"
							],
							"query": [
								{
									"key": "text",
									"value": "Kolya"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "phones",
			"item": [
				{
					"name": "Phone 1 create for user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has phone create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test phone 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test phone 'number' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('number');",
									"    pm.expect(jsonData.number, '\"number\" must be \"101010\"').to.eql('101010');",
									"});",
									"pm.test(\"Test phone 'notes' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('notes');",
									"    pm.expect(jsonData.notes, '\"notes\" must be \"лучший друг\"').to.eql('лучший друг');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"number\": \"10-10-10\",\n    \"user\": {\n        \"id\": \"1\"\n    },\n    \"notes\": \"лучший друг\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/OIStest/phones",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"OIStest",
								"phones"
							]
						}
					},
					"response": []
				},
				{
					"name": "Phone 2 create for user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has phone create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test phone 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test phone 'number' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('number');",
									"    pm.expect(jsonData.number, '\"number\" must be \"202020\"').to.eql('202020');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"number\": \"20-20-20\",\n    \"user\": {\n        \"id\": \"1\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/OIStest/phones",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"OIStest",
								"phones"
							]
						}
					},
					"response": []
				},
				{
					"name": "Phone 1 create for user 1 duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									" pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"number\": \"20-20-20\",\n    \"user\": {\n        \"id\": \"1\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/OIStest/phones",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"OIStest",
								"phones"
							]
						}
					},
					"response": []
				},
				{
					"name": "Phone 1 change for User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has phone create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test phone 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test phone 'number' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('number');\r",
									"    pm.expect(jsonData.number, '\"number\" must be \"505050\"').to.eql('505050');\r",
									"});\r",
									"pm.test(\"Test phone 'notes' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('notes');\r",
									"    pm.expect(jsonData.notes, '\"notes\" must be \"лучший друг\"').to.eql('лучший друг');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"number\": \"50-50-50\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/OIStest/phones/:phoneId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"OIStest",
								"phones",
								":phoneId"
							],
							"variable": [
								{
									"key": "phoneId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Phone 1 create for user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has phone create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test phone 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);",
									"});",
									"pm.test(\"Test phone 'number' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('number');",
									"    pm.expect(jsonData.number, '\"number\" must be \"89055902020\"').to.eql('89055902020');",
									"});",
									"pm.test(\"Test user 'notes' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('notes');",
									"    pm.expect(jsonData.notes, '\"notes\" must be \"брат\"').to.eql('брат');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"number\": \"89055902020\",\n    \"user\": {\n        \"id\": \"2\"\n    },\n    \"notes\": \"брат\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/OIStest/phones",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"OIStest",
								"phones"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get phone with id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list user response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test phone 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test phone 'number' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('number');\r",
									"    pm.expect(jsonData[0].number, '\"number\" must be \"202020\"').to.eql('202020');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/OIStest/phones?ids=2",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"OIStest",
								"phones"
							],
							"query": [
								{
									"key": "ids",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all phones user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list user response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Test phone 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test phone 'number' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('number');\r",
									"    pm.expect(jsonData[0].number, '\"number\" must be \"505050\"').to.eql('505050');\r",
									"});\r",
									"pm.test(\"Test phone 'number' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('notes');\r",
									"    pm.expect(jsonData[0].notes, '\"notes\" must be \"лучший друг\"').to.eql('лучший друг');\r",
									"});\r",
									"\r",
									"pm.test(\"Test phone 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test phone 'number' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('number');\r",
									"    pm.expect(jsonData[1].number, '\"number\" must be \"202020\"').to.eql('202020');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/OIStest/phones/:userId?userIds=1",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"OIStest",
								"phones",
								":userId"
							],
							"query": [
								{
									"key": "userIds",
									"value": "1"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск телефонов по заметке",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test list user response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"pm.test(\"Test user[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('number');\r",
									"    pm.expect(jsonData[0].number, '\"number\" must be \"89055902020\"').to.eql('89055902020');\r",
									"});\r",
									"pm.test(\"Test user[0] 'notes' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('notes');\r",
									"    pm.expect(jsonData[0].notes, '\"notes\" must be \"брат\"').to.eql('брат');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/OIStest/phones/search?text=брат",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"OIStest",
								"phones",
								"search"
							],
							"query": [
								{
									"key": "text",
									"value": "брат"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск телефонов по номеру",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test list user response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"pm.test(\"Test user[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('number');\r",
									"    pm.expect(jsonData[0].number, '\"number\" must be \"89055902020\"').to.eql('89055902020');\r",
									"});\r",
									"pm.test(\"Test user[0] 'notes' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('notes');\r",
									"    pm.expect(jsonData[0].notes, '\"notes\" must be \"брат\"').to.eql('брат');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/OIStest/phones/search?text=89055902020",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"OIStest",
								"phones",
								"search"
							],
							"query": [
								{
									"key": "text",
									"value": "89055902020"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}